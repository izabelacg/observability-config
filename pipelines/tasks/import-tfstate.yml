platform: linux
image_resource:
  type: registry-image
  source: {repository: concourse/unit}

inputs:
  - name: greenpeace
outputs:
  - name: tfstate

params:
  RESOURCE_ADDRESS:
  DATADOG_API_KEY:
  DATADOG_APP_KEY:
  DASHBOARD_TITLE:

run:
  path: sh
  args:
    - -c
    - |
      # Use Datadog web-api to find dashboard ID based on the dashboard title
      curl -X GET https://api.datadoghq.com/api/v1/dashboard \
      -H "Content-Type: application/json" \
      -H "DD-API-KEY: ${DATADOG_API_KEY}" \
      -H "DD-APPLICATION-KEY: ${DATADOG_APP_KEY}" \
      -s -o all-dashboards.json

      DASHBOARD_ID=$(jq -r --arg TITLE "$DASHBOARD_TITLE" '.dashboards[] | select(.title == $TITLE) | .id' all-dashboards.json)

      DASHBOARD_SS_TITLE="$DASHBOARD_TITLE - System Stats"
      DASHBOARD_SS_ID=$(jq -r --arg TITLE "$DASHBOARD_SS_TITLE" '.dashboards[] | select(.title == $TITLE) | .id' all-dashboards.json)

      # Workaround to use `terraform import` command with modules and dynamic value assignment
      cd greenpeace
      mv dashboards/main.tf dashboards/main.tf.original
      sed -e "s/var.datadog_api_key/\"$DATADOG_API_KEY\"/g" \
          -e "s/var.datadog_app_key/\"$DATADOG_APP_KEY\"/g" \
          dashboards/main.tf.original > dashboards/main.tf

      terraform init
      terraform import $RESOURCE_ADDRESS $DASHBOARD_ID
      terraform import $RESOURCE_ADDRESS $DASHBOARD_SS_ID
      cp *.tfstate ../tfstate